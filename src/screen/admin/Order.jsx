import React, { useEffect } from "react";
import { useSocketIOContext } from "../../context/SocketIOContext";
import useDayjs from "../../hooks/useDayjs";
import Masonry from "react-masonry-css";
import { updateOrderStatus } from "./../../api/Order.api";
import { toast } from "react-toastify";
import { priceFormatter } from "../../util/priceFormatter";

export default function Order() {
  const { formatDate } = useDayjs();
  const { socket, orders } = useSocketIOContext();
  useEffect(() => {
    socket.emit("initOrder", {
      page: 1,
      limit: 1000,
    });

    return () => socket?.close;
  }, [socket]);

  async function processingOrder({ id, status }) {
    toast
      .promise(updateOrderStatus({ order_id: id, status }), {
        pending: "ƒêang x·ª≠ l√Ω...",
        success: "C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng",
        error: "C√≥ l·ªói x·∫£y ra",
      })
      .then(() => {
        socket.emit("initOrder", {
          page: 1,
          limit: 1000,
        });
      });
  }

  return (
    <div>
      <div>c√≤n l·∫°i s·ªë ƒë∆°n h√†ng {orders.length}</div>
      <Masonry
        breakpointCols={{
          default: 5, // M·∫∑c ƒë·ªãnh 4 c·ªôt cho desktop
          1300: 4, // 4
          1100: 3, // 3 c·ªôt cho m√†n h√¨nh t·ª´ 1100px (tablet)
          700: 2, // 2 c·ªôt cho m√†n h√¨nh t·ª´ 700px (mobile)
        }} // C·∫•u h√¨nh s·ªë c·ªôt
        className="flex flex-wrap" // Kho·∫£ng c√°ch gi·ªØa c√°c item
        columnClassName="flex flex-col items-center" // L·ªõp cho m·ªói c·ªôt
      >
        {orders.map((order) => {
          return (
            <div
              key={order.id}
              className="border p-2 m-2 bg-white rounded-lg shadow-md"
            >
              {/* Header */}
              <div className="flex justify-between items-center border-b pb-2 flex-col">
                <h2 className="text-lg font-semibold text-gray-800">
                  üõí ƒê∆°n h√†ng #{order.id}
                </h2>
                <span className="text-sm text-gray-500">
                  {formatDate(order.createdAt)}
                </span>
              </div>

              {/* Th√¥ng tin ƒë∆°n h√†ng */}
              <div className="flex flex-1 gap-2 text-gray-700 flex-col">
                <div>
                  <span className="font-semibold">üìç V·ªã tr√≠:</span>{" "}
                  {order.table_name}
                </div>
                <div>
                  <span className="font-semibold">üí∞ Ph∆∞∆°ng th·ª©c:</span>
                  {order.payment_method === "cash"
                    ? " Ti·ªÅn m·∫∑t"
                    : " Chuy·ªÉn kho·∫£n"}
                </div>
                <div>
                  <span className="font-semibold">üíµ T·ªïng ti·ªÅn:</span>
                  <span className="font-bold text-green-600">
                    {" "}
                    {priceFormatter(order?.total).formattedPrice}
                  </span>
                </div>
                <div>
                  <span className="font-semibold">üöÄ Tr·∫°ng th√°i: </span>
                  <span className="uppercase font-semibold">
                    {
                      {
                        pending: "Ch·ªù x·ª≠ l√Ω",
                        processing: "ƒêang x·ª≠ l√Ω",
                        completed: "Ho√†n th√†nh",
                        cancelled: "ƒê√£ h·ªßy",
                      }[order.status]
                    }
                  </span>
                </div>
                {order.ref_pay && (
                  <p>
                    <span className="font-semibold">üîó Tham chi·∫øu:</span>{" "}
                    {order.ref_pay}
                  </p>
                )}
                <div>
                  <span className="font-semibold">üí≥ Thanh to√°n:</span>
                  <span
                    className={`ml-1 px-2 py-1 text-sm rounded ${
                      order.payment_status === "pending"
                        ? "bg-yellow-100 text-yellow-800"
                        : "bg-green-100 text-green-800"
                    }`}
                  >
                    {order.payment_status === "pending"
                      ? "Ch∆∞a thanh to√°n"
                      : "ƒê√£ thanh to√°n"}
                  </span>
                </div>
              </div>

              {/* Danh s√°ch s·∫£n ph·∫©m */}
              <div className="mt-3">
                <h3 className="text-xl font-semibold border-b pb-1">
                  üçΩÔ∏è Danh s√°ch m√≥n
                </h3>
                <div className="space-y-2 mt-2">
                  {order.orderDetails.map((detail, index) => (
                    <div
                      key={index}
                      className="p-2 border rounded-md bg-gray-50"
                    >
                      <p className="font-semibold text-gray-800">
                        {detail.product_name}
                      </p>
                      <div className="text-sm text-gray-600">
                        <p>S·ªë l∆∞·ª£ng: {detail.quantity}</p>
                        <p>
                          Gi√°:{" "}
                          <span className="text-green-600 font-bold">
                            {priceFormatter(detail.price).formattedPrice}
                          </span>
                        </p>
                      </div>

                      {/* Danh s√°ch topping */}
                      {detail.toppingDetails.length > 0 && (
                        <div className="mt-1 border-t pt-1 text-sm text-gray-600">
                          <ul className="list-disc pl-5">
                            {detail.toppingDetails.map((topping) => (
                              <li key={topping.sku_topping}>
                                {topping.name_topping} - {topping.quantity} x
                                <span className="text-green-600 font-bold">
                                  {" "}
                                  {priceFormatter(topping.price).formattedPrice}
                                </span>
                              </li>
                            ))}
                          </ul>
                        </div>
                      )}
                    </div>
                  ))}
                  <div className="flex justify-around">
                    <button
                      className="bg-green-500 text-white px-2 py-1 rounded"
                      onClick={() => {
                        confirm("X√°c nh·∫≠n ti·∫øp nh·∫≠n ƒë∆°n h√†ng?") &&
                          processingOrder({
                            id: order.id,
                            status: "processing",
                          });
                      }}
                    >
                      <span>Ti·∫øp nh·∫≠n</span>
                    </button>
                    <button
                      className="bg-red-500 text-white px-2 py-1 rounded"
                      onClick={() => {
                        confirm("X√°c nh·∫≠n h·ªßy ƒë∆°n h√†ng?") &&
                          processingOrder({
                            id: order.id,
                            status: "cancelled",
                          });
                      }}
                    >
                      <span>H·ªßy</span>
                    </button>
                  </div>
                </div>
              </div>
            </div>
          );
        })}
      </Masonry>
    </div>
  );
}
